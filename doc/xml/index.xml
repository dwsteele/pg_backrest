<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE doc SYSTEM "doc.dtd">
<doc subtitle="Reliable {[postgres]} Backup &amp; Restore" toc="n">
    <variable-list>
        <!-- Variables used by the rest of the script -->
        <variable key="github-url-base">https://github.com/pgbackrest/pgbackrest</variable>
        <variable key="github-url-master">{[github-url-base]}/blob/master</variable>
        <variable key="github-url-issues">{[github-url-base]}/issues</variable>
        <variable key="github-url-change-log">{[github-url-master]}/CHANGELOG.md</variable>
        <variable key="github-url-release">{[github-url-base]}/archive/release</variable>
        <variable key="github-url-license">{[github-url-master]}/LICENSE</variable>

        <variable key="backrest-url-base">http://www.pgbackrest.org</variable>
        <variable key="backrest-page-user-guide">user-guide.html</variable>
        <variable key="backrest-page-configuration">configuration.html</variable>
        <variable key="backrest-page-command">command.html</variable>

        <variable key="crunchy-url-base">http://www.crunchydata.com</variable>
        <variable key="crunchy-url-cbm">{[crunchy-url-base]}/crunchy-backup-manager</variable>

        <variable key="resonate-url-base">http://www.resonate.com</variable>
    </variable-list>

    <section id="introduction">
        <title>Introduction</title>

        <p><backrest/> aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads.</p>

        <p>Instead of relying on traditional backup tools like tar and rsync, <backrest/> implements all backup features internally and uses a custom protocol for communicating with remote systems.  Removing reliance on tar and rsync allows for better solutions to database-specific backup issues.  The custom remote protocol limits the types of connections that are required to perform a backup which increases security.</p>
    </section>

    <section id="features">
        <title>Features</title>

        <section id="multi-threaded">
            <title>Multithreaded Backup &amp; Restore</title>

            <p>Blah, blah, blah</p>
        </section>

        <section id="local-or-remote">
            <title>Local or Remote Operation</title>

            <p>Blah, blah, blah</p>
        </section>

        <section id="backup-types">
            <title>Full, Incremental, &amp; Differential Backups</title>

            <p>Blah, blah, blah</p>
        </section>

        <section id="backup-rotation">
            <title>Backup Rotation &amp; Archive Expiration</title>

            <p>Expiration policies maintain a set of backups that cover </p>
        </section>

        <section id="backup-intregrity">
            <title>Backup Integrity</title>

            <p>Checksums are calculated for every file in the backup and rechecked during a restore.  After a backup finishes copying files it waits until every WAL segment required to make the backup consistent reaches the repository.</p>

            <p>Backups in the repository are stored as in the same format as a standard <postgres/> cluster.  If compression is disabled and hard links are enabled it is possible to snapshot a backup in the repository and bring up a <postgres/> cluster directly on the snapshot.  This can be a boon for very large databases that are time-consuming to restore in the traditional way.</p>
        </section>

        <section id="backup-resume">
            <title>Backup Resume</title>

            <p>An aborted backup can be resumed from the point where it was stopped.  Files that were already copied are compared with the checksums in the manifest to ensure integrity.  Since this operation can take place entirely on the backup server it reduces load on the database server and in the end saves time since checksum calculation is faster than compressing and retransmitting data.</p>
        </section>

        <section id="stream-compression-checksums">
            <title>Streaming Compression &amp; Checksums</title>

            <p>Compression and checksum calculations are performed in stream while files are being copied to the repository, whether the repository is located locally or remotely.</p>

            <p>If the repository is on a backup server then compression is performed on the database server and files are transmitted compressed and simply stored on the backup server.  When compression is disabled a lower level of compression is utilized to make efficient use of available bandwidth while keeping CPU cost to a minimum.</p>
        </section>

        <section id="delta-restore">
            <title>Delta Restore</title>

            <p>Blah, blah, blah</p>
        </section>

        <section id="advanced-archiving">
            <title>Advanced Archiving</title>

            <p>Get, push, async</p>
        </section>

        <section id="tablespace-link-support">
            <title>Tablespace &amp; Link Support</title>

            <p>Blah, blah, blah</p>
        </section>

        <section id="postgres-compatibility">
            <title>Compatibility with <postgres/> >= 8.3</title>

            <p>Blah, blah, blah</p>
        </section>
    </section>

    <section id="getting-started">
        <title>Getting Started</title>

        <p><backrest/> strives to be easy to configure and operate:
        <ul>
          <li><link page="{[backrest-page-user-guide]}">User guide</link> for Ubuntu 12.04 &amp; 14.04 / <postgres/> 9.4.</li>
          <li><link page="{[backrest-page-command]}">Command reference</link> for command-line operations.</li>
          <li><link page="{[backrest-page-configuration]}">Configuration reference</link> for creating rich <backrest/> configurations.</li></ul></p>
    </section>

    <section id="contributions">
        <title>Contributions</title>

        <p>Contributions to <backrest/> are always welcome!

        Code fixes or new features can be submitted via pull requests.  Ideas for new features and improvements to existing functionality or documentation can be <link url="{[github-url-issues]}">submitted as issues</link>.

        Bug reports should be <link url="{[github-url-issues]}">submitted as issues</link>.  Please provide as much information as possible to aid in determining the cause of the problem.

        You will always receive credit in the <link url="{[github-url-change-log]}">change log</link> for your contributions.</p>
    </section>

    <section id="support">
        <title>Support</title>

        <p><backrest/> is completely free and open source under the <link url="{[github-url-license]}">MIT</link> license.  You may use it for personal or commercial purposes without any restrictions whatsoever.  Bug reports are taken very seriously and will be addressed as quickly as possible.

        Creating a robust disaster recovery policy with proper replication and backup strategies can be a very complex and daunting task.  You may find that you need help during the architecture phase and ongoing support to ensure that your enterprise continues running smoothly.

        <link url="{[crunchy-url-base]}">Crunchy Data</link> provides packaged versions of <backrest/> for major operating systems and expert full life-cycle commercial support for <backrest/> and all things <postgres/>.  <link url="{[crunchy-url-base]}">Crunchy Data</link> is committed to providing open source solutions with no vendor lock-in so cross-compatibility with the community version of <backrest/> is always strictly maintained.

        Please visit <link url="{[crunchy-url-base]}">Crunchy Data</link> for more information.</p>
    </section>

    <section id="recognition">
        <title>Recognition</title>

        <p>Primary recognition goes to Stephen Frost for all his valuable advice and criticism during the development of <backrest/>.

        <link url="{[crunchy-url-base]}">Crunchy Data</link> has contributed significant time and resources to <backrest/> and continues to actively support development. <link url="{[resonate-url-base]}">Resonate</link> also contributed to the development of <backrest/> and allowed early (but well tested) versions to be installed as their primary <postgres/> backup solution.</p>
    </section>
</doc>
