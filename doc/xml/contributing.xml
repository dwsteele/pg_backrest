<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE doc SYSTEM "doc.dtd">
<doc title="{[project]}" subtitle="Contributing to {[project]}" toc="y">
    <description>{[project]} Contributing Guidelines.</description>

    <section id="introduction">
        <title>Introduction</title>

        <p>This documentation is intended to assist contributors to <backrest/> by outlining some basic steps and guidelines for contributing to the project.  Coding standards to follow are defined in <link url="https://github.com/pgbackrest/pgbackrest/blob/master/CODING.md">CODING.md</link>. For testing, it is recommended that Vagrant and Docker be used; instructions are provided in the <file>README.md</file> file of the <backrest/> <link url="https://github.com/pgbackrest/pgbackrest/tree/master/test">test</link> directory. A list of all possible test combinations can be viewed by running:</p>
        <code-block>
            /backrest/test/test.pl --dry-run
        </code-block>

<!-- TODO:
1) Add the information on RHEL for testing since the XML parser is needed (see doc/README)
2) Also that readme explains building the docs so it may be usefull (if that info is not somewhere else) -->

    </section>

    <section id="option">
        <title>Adding an Option</title>

        <p>Options can be added to a command or multiple commands. Options can be configuration file only, command-line only or valid for both. Once an option is added, <file>config.auto.*</file>, <file>define.auto.*</file> and <file>parse.auto.*</file> files will automatically be generated by the build system.</p>

        <p> To add an option, two files need be to be modified:</p>
        <list>
            <list-item>build/lib/pgBackRestBuild/Config/Data.pm</list-item>
            <list-item>doc/xml/reference.xml</list-item>
        </list>

        <p>These files are discussed in the following sections.</p>

        <section id="data-file">
            <title>Data.pm</title>

            <p>There is a detailed comment at the top of this file on the configuration definitions which one can refer to in determining how to define the rules for the option.</p>

            <section id="command-line-only">
                <title>Command Line Only Options</title>

                <p>Command-line only options are options where <code>CFGDEF_SECTION</code> rule is not defined. There are two sections to be updated when adding a command-line only option, each of which is marked by the comment <code>Command-line only options</code>.</p>

                <list>
                    <list-item><b>Section 1:</b> Find the first section with the <code>Command-line only options</code> comment. This section defines and exports the constant for the actual option.</list-item>
                    <list-item><b>Section 2:</b> Find the second section with the <code>Command-line only options</code> comment. This is where the rules for the option are defined.</list-item>
                </list>

                <p>The steps for how to update these sections are detailed below.</p>

                <p><b>Section 1</b></p>

                <p>Copy the two lines (<quote>use constant</quote>/<quote>push</quote>) of an existing option and paste them where the option would be in alphabetical order and rename it to the same name as the new option name. For example CFGOPT_DRY_RUN, defined as <quote>dry-run</quote>.</p>

                <p><b>Section 2</b></p>

                <p>To better explain this section, <code>CFGOPT_ONLINE</code> will be used as an example:</p>

                <code-block>
    &amp;CFGOPT_ONLINE =>
    {
        &amp;CFGDEF_TYPE => CFGDEF_TYPE_BOOLEAN,
        &amp;CFGDEF_NEGATE => true,
        &amp;CFGDEF_DEFAULT => true,
        &amp;CFGDEF_COMMAND =>
        {
            &amp;CFGCMD_BACKUP => {},
            &amp;CFGCMD_STANZA_CREATE => {},
            &amp;CFGCMD_STANZA_UPGRADE => {},
        }
    },
                </code-block>

                <p>Note that <code>CFGDEF_SECTION</code> is not present thereby making this a command-line only option. Each line is explained below:</p>

                <list>
                    <list-item>CFGOPT_ONLINE - the name of the option as defined in <b>Section 1</b></list-item>
                    <list-item>CFGDEF_TYPE - the type of the option. Valid types are: <code>CFGDEF_TYPE_BOOLEAN</code>, <code>CFGDEF_TYPE_FLOAT</code>, <code>CFGDEF_TYPE_HASH</code>, <code>CFGDEF_TYPE_INTEGER</code>, <code>CFGDEF_TYPE_LIST</code>, <code>CFGDEF_TYPE_PATH</code>, <code>CFGDEF_TYPE_SIZE</code>, and <code>CFGDEF_TYPE_STRING</code>
                    </list-item>
                    <list-item>CFGDEF_NEGATE - being a command-line only boolean option, this rule would automatically default to false so it must be defined if the option is negatable. Ask yourself if negation makes sense, for example, would a --dry-run option make sense as --no-dry-run? If the answer is no, then this rule can be omitted as it would automatically default to false. Any boolean option that cannot be negatable, must be a command-line only and not a configuration file option as all configuration boolean options must be negatable.</list-item>
                    <list-item>CFGDEF_DEFAULT - sets a default for the option if the option is not provided when the command is run. The default can be global or it can be specified for a specific command in the <code>CFGDEF_COMMAND</code> section. For example, if it was desirable for the default to be false for the <code>CFGCMD_STANZA_CREATE</code> then CFGDEF_NEGATE =>  would be set to <code>true</code> in each command listed except for <code>CFGCMD_STANZA_CREATE</code> where it would be <code>false</code> and it would not be specified (as it is here) in the global section (meaning global for all commands listed).</list-item>
                    <list-item>CFGDEF_COMMAND - list each command for which the option is valid. If a command is not listed, then the option is not valid for the command and an error will be thrown if it attempted to be used for that command.</list-item>
                </list>

            </section>
        </section>

        <section id="reference-file">
            <title>reference.xml</title>
<!-- TODO: This info may be wrong - there are config- and option- sections so need to check. Also need to complete this sectino with examples-->
            <p>All options must be documented or the system will error during the build.  To add an option, find the command section identified by <code>config-section id="COMMAND"</code> section where COMMAND is the name of the command (e.g. <code>expire</code>) or, if the option is used by more than one command and the definition for the option is the same for all of the commands, the <code>config-section id="general"</code> section.</p>
        </section>
    </section>
</doc>
