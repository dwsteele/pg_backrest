<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE doc SYSTEM "doc.dtd">
<doc title="{[project]}" subtitle="Contributing to {[project]}" toc="y">
    <description>{[project]} Contributing Guidelines.</description>

    <section id="introduction">
        <title>Introduction</title>

        <p>This documentation is intended to assist contributors to <backrest/> by outlining some basic steps and guidelines for contributing to the project.  Coding standards to follow are defined in <link url="https://github.com/pgbackrest/pgbackrest/blob/master/CODING.md">CODING.md</link>. At a minimum, unit tests must be written and run and the documentation run before submitting a Pull Request; see the <link section="/testing">Testing</link> section below for details.</p>
    </section>

    <section id="option">
        <title>Adding an Option</title>

        <p>Options can be added to a command or multiple commands. Options can be configuration file only, command-line only or valid for both. Once an option is added, <file>config.auto.*</file>, <file>define.auto.*</file> and <file>parse.auto.*</file> files will automatically be generated by the build system.</p>

        <p> To add an option, two files need be to be modified:</p>
        <list>
            <list-item>build/lib/pgBackRestBuild/Config/Data.pm</list-item>
            <list-item>doc/xml/reference.xml</list-item>
        </list>

        <p>These files are discussed in the following sections.</p>

        <section id="data-file">
            <title>Data.pm</title>

            <p>There is a detailed comment at the top of this file on the configuration definitions which one can refer to in determining how to define the rules for the option.</p>

            <section id="command-line-only">
                <title>Command Line Only Options</title>

                <p>Command-line only options are options where <code>CFGDEF_SECTION</code> rule is not defined. There are two sections to be updated when adding a command-line only option, each of which is marked by the comment <code>Command-line only options</code>.</p>

                <list>
                    <list-item><b>Section 1:</b> Find the first section with the <code>Command-line only options</code> comment. This section defines and exports the constant for the actual option.</list-item>
                    <list-item><b>Section 2:</b> Find the second section with the <code>Command-line only options</code> comment. This is where the rules for the option are defined.</list-item>
                </list>

                <p>The steps for how to update these sections are detailed below.</p>

                <p><b>Section 1</b></p>

                <p>Copy the two lines (<quote>use constant</quote>/<quote>push</quote>) of an existing option and paste them where the option would be in alphabetical order and rename it to the same name as the new option name. For example CFGOPT_DRY_RUN, defined as <quote>dry-run</quote>.</p>

                <p><b>Section 2</b></p>

                <p>To better explain this section, <code>CFGOPT_ONLINE</code> will be used as an example:</p>

                <code-block>
    &amp;CFGOPT_ONLINE =>
    {
        &amp;CFGDEF_TYPE => CFGDEF_TYPE_BOOLEAN,
        &amp;CFGDEF_NEGATE => true,
        &amp;CFGDEF_DEFAULT => true,
        &amp;CFGDEF_COMMAND =>
        {
            &amp;CFGCMD_BACKUP => {},
            &amp;CFGCMD_STANZA_CREATE => {},
            &amp;CFGCMD_STANZA_UPGRADE => {},
        }
    },
                </code-block>

                <p>Note that <code>CFGDEF_SECTION</code> is not present thereby making this a command-line only option. Each line is explained below:</p>

                <list>
                    <list-item>CFGOPT_ONLINE - the name of the option as defined in <b>Section 1</b></list-item>
                    <list-item>CFGDEF_TYPE - the type of the option. Valid types are: <code>CFGDEF_TYPE_BOOLEAN</code>, <code>CFGDEF_TYPE_FLOAT</code>, <code>CFGDEF_TYPE_HASH</code>, <code>CFGDEF_TYPE_INTEGER</code>, <code>CFGDEF_TYPE_LIST</code>, <code>CFGDEF_TYPE_PATH</code>, <code>CFGDEF_TYPE_SIZE</code>, and <code>CFGDEF_TYPE_STRING</code>
                    </list-item>
                    <list-item>CFGDEF_NEGATE - being a command-line only boolean option, this rule would automatically default to false so it must be defined if the option is negatable. Ask yourself if negation makes sense, for example, would a --dry-run option make sense as --no-dry-run? If the answer is no, then this rule can be omitted as it would automatically default to false. Any boolean option that cannot be negatable, must be a command-line only and not a configuration file option as all configuration boolean options must be negatable.</list-item>
                    <list-item>CFGDEF_DEFAULT - sets a default for the option if the option is not provided when the command is run. The default can be global or it can be specified for a specific command in the <code>CFGDEF_COMMAND</code> section. For example, if it was desirable for the default to be false for the <code>CFGCMD_STANZA_CREATE</code> then CFGDEF_NEGATE =>  would be set to <code>true</code> in each command listed except for <code>CFGCMD_STANZA_CREATE</code> where it would be <code>false</code> and it would not be specified (as it is here) in the global section (meaning global for all commands listed).</list-item>
                    <list-item>CFGDEF_COMMAND - list each command for which the option is valid. If a command is not listed, then the option is not valid for the command and an error will be thrown if it attempted to be used for that command.</list-item>
                </list>

            </section>
        </section>

        <section id="reference-file">
            <title>reference.xml</title>

            <p>All options must be documented or the system will error during the build.  To add an option, find the command section identified by <code>command id="COMMAND"</code> section where COMMAND is the name of the command (e.g. <cmd>expire</cmd>) or, if the option is used by more than one command and the definition for the option is the same for all of the commands, the <code>operation-general title="General Options"</code> section.</p>

            <p>To add an option, add the following to the <code>&lt;option-list&gt;</code> section; if it does not exist, then wrap the following in <code>&lt;option-list&gt;</code> <code>&lt;/option-list&gt;</code>. This example uses the boolean option <code>force</code> of the <cmd>restore</cmd> command. Simply replace that with your new option and the appropriate <code>summary</code>, <code>text</code> and <code>example</code>.</p>

            <code-block>
&lt;option id="force" name="Force"&gt;
    &lt;summary&gt;Force a restore.&lt;/summary&gt;

    &lt;text&gt;By itself this option forces the &lt;postgres/&gt; data and tablespace paths to be completely overwritten.  In combination with &lt;br-option&gt;--delta&lt;/br-option&gt; a timestamp/size delta will be performed instead of using checksums.&lt;/text&gt;

    &lt;example>y&lt;/example&gt;
&lt;/option&gt;
            </code-block>
            <admonition type="important">currently a period (.) is required to end the <code>summary</code> section.</admonition>
        </section>
    </section>

    <section id="testing">
        <title>Testing</title>

        <p>For testing, it is recommended that Vagrant and Docker be used; instructions are provided in the <file>README.md</file> file of the <backrest/> <link url="https://github.com/pgbackrest/pgbackrest/tree/master/test">test</link> directory. A list of all possible test combinations can be viewed by running:</p>
        <code-block>
            /backrest/test/test.pl --dry-run
        </code-block>

        <admonition type="warning">currently the <code>BACKREST_USER</code> in <file>ContainerTest.pm</file> must exists, or the test suite will fail with a string concatenation error.</admonition>

        <p>If using a RHEL system, the CPAN XML parser is required for running <file>test.pl</file> and <file>doc.pl</file>. Instructions for installing Docker and the XML parse can be found in the <file>README.md</file> file of the <backrest/> <link url="https://github.com/cmwshang/pgbackrest/tree/master/doc">doc</link> directory in the section <quote>The following is a sample CentOS/RHEL 7 configuration that can be used for building the documentation</quote>. NOTE that the <code>Install latex (for building PDF)</code> is not required since testing of the docs need only be run for HTML output.</p>

        <p>While some files are automatically generated during <code>make</code>, others are generated by running the test harness as follows:</p>

        <code-block>
            /backrest/test/test.pl --gen-only
        </code-block>

        <p>Prior to any submission, the html version of the documentation should also be run.</p>

        <code-block>
            /backrest/doc/doc.pl --out=html
        </code-block>

        <admonition type="note"><code>ERROR: [028]</code> regarding cache is invalid is OK; it just means there have been changes and the documentation will be built from scratch. In this case, be patient as the build could take 20 minutes or more depending on your system.</admonition>

        <section id="unit-test">
            <title>Writing a Unit Test</title>

            <p>The goal of unit testing is to have 100 percent coverage. Two files will usually be involved in this process:</p>

            <list>
                <list-item><b>define.yaml</b> - defines the number of tests to be run for each module and test file. There is a comment at the top of the file that provides more information about this file.</list-item>
                <list-item><b>src/module/somefileTest.c</b> - where <quote>somefile</quote> is the path and name of the test file where the unit tests are located for the code being updated (e.g. <file>src/module/command/expireTest.c</file>).</list-item>
            </list>

            <section id="define-yaml">
                <title>define.yaml</title>

                <p>Each module is separated by a line of asterisks (*) and each test within is separated by a line of dashes (-). In the example below, the module is <code>command</code> and the unit test is <code>check</code>. The number of calls to <code>testBegin()</code> in a unit test file will dictate the number following <code>total:</code>, in this case 2. Under <code>coverage:</code>, the list of files that will be tested must be listed followed by the coverage level, which should always be <code>full</code>.</p>

                <code-block>
  # ********************************************************************************************************************************
  - name: command

    test:
      # ----------------------------------------------------------------------------------------------------------------------------
      - name: check
        total: 2

        coverage:
          command/check/common: full
          command/check/check: full
                </code-block>

            </section>

            <section id="test-file">
                <title>somefileTest.c</title>
                <p>Assuming that a test file already exists, new unit tests will either go in a new <code>testBegin()</code> section or be added to an existing section.</p>

                <code-block>
// *****************************************************************************************************************************
if (testBegin("expireBackup()"))
                </code-block>

                <p><b>Setting up the command to be run</b></p>
                <p>If configuration options are required then a string list with the command and options must be defined and passed to the function <code>harnessCfgLoad()</code>. For example, the following will set up a test to run <cmd>pgbackrest --repo-path=test/test-0/repo info</cmd> command:</p>

                <code-block>
String *repoPath = strNewFmt("%s/repo", testPath());                    // create a string defining the repo path on the test system
StringList *argList = strLstNew();                                      // create an empty string list
strLstAddZ(argList, "pgbackrest");                                      // add the executable as a character string to the string list
strLstAdd(argList, strNewFmt("--repo-path=%s/", strPtr(repoPath)));     // add the --repo-path option as a formatted string
strLstAddZ(argList, "info");                                            // add the command
harnessCfgLoad(strLstSize(argList), strLstPtr(argList));                // load the command into the test harness

TEST_RESULT_STR(strPtr(infoRender()), "No stanzas exist in the repository.\n", "text - no stanzas");  // run the test
                </code-block>

                <p>Tests are run via macros. All test macros expect the first parameter to be the function to call that is being tested. With the exception of TEST_RESULT_VOID, the second parameter is the expected result, and with the exception of TEST_ERROR, the third parameter is a short description of the test. The most common macros are:</p>

                <list>
                    <list-item>TEST_RESULT_STR - Test the actual value of the string returned by the function.</list-item>
                    <list-item>TEST_RESULT_UINT / TEST_RESULT_INT - Test for an unsigned integer / integer.</list-item>
                    <list-item>TEST_RESULT_BOOL - Test a boolean return value.</list-item>
                    <list-item>TEST_RESULT_PTR / TEST_RESULT_PTR_NE - Test a pointer: useful for testing if the pointer is NULL or not equal (NE) to NULL.</list-item>
                    <list-item>TEST_RESULT_VOID - The function being tested returns a <code>void</code>. This is then usually followed by tests that ensure other actions occurred (e.g. a file was written to disk).</list-item>
                    <list-item>TEST_ERROR / TEST_ERROR_FMT - Test for that a specific error code was raised with specific wording.</list-item>
                </list>

                <p><b>Storing a file</b></p>
                <p>Sometimes it is necessary to store a file to the test system. The following demostrates that. It is not necessary to wrap the storagePutNP in TEST_RESULT_VOID, but doing so allows a short description to be displayed when running the tests (in this case <quote>store a corrupt backup.info file</quote>).</p>

                <code-block>
String *content = strNew("bad content");
TEST_RESULT_VOID(
    storagePutNP(storageNewWriteNP(storageTest, strNewFmt("%s/backup/demo/backup.info", strPtr(repoPath))),
        harnessInfoChecksum(content)), "store a corrupt backup.info file");
                </code-block>

                <p><b>Testing a log message</b></p>
                <p>If a the function being tested logs something with <code>LOG_WARN</code>, <code>LOG_INFO</code> or other <code>LOG_</code> macro, then the logged message must be cleared before the end of the test by using the <code>harnessLogResult()</code> function.</p>

                <code-block>
harnessLogResult(
    "P00   WARN: WAL segment '000000010000000100000001' was not pushed due to error [25] and was manually skipped: error");
                </code-block>
            </section>
        </section>

        <section id="unit-test-run">
            <title>Running a Unit Test</title>

            <p>Unit tests are run, and coverage of the code being tested is provided, by running the following. This example would run the test set from the <b>define.yaml</b> section detailed above.</p>

            <code-block>
/backrest/test/test.pl --vm-out --dev --module=command --test=check --coverage-only
            </code-block>

            <p>Because no test run is specified and <code>--coverage-only</code> has been requested, a coverage report will be generated and written to the local file system under <file>backrest/test/coverage/c-coverage.html</file> and will highlight code that has not been tested.</p>

            <p>Sometimes it is useful to look at files that were generated during the test. The default for running any test is that, at the start/end of the test, the test harness will clean up all files and directories created. To override this behavior, a single test run must be specified and the option <code>--no-cleanup</code> provided. Again, continuing with the check command, we see in <b>define.yaml</b> above that there are two tests. Below, test one will be run and nothing will be cleaned up so that the files and directories in test/test-0 can be inspected.</p>

            <code-block>
/backrest/test/test.pl --vm-out --dev --module=command --test=check --coverage-only --run=1 --no-cleanup
            </code-block>

            <p> For more details on running tests, again, please refer to the <file>README.md</file> file of the <backrest/> <link url="https://github.com/pgbackrest/pgbackrest/tree/master/test">test</link> directory.</p>
        </section>
    </section>
</doc>
